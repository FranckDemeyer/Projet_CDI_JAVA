package com.maville.back.service.implementations;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.maville.back.dao.interfaces.AccountDAO;
import com.maville.back.dto.AccountDTO;
import com.maville.back.entities.Account;
import com.maville.back.service.interfaces.AccountService;

@Transactional
@Component("accountService")
public class AccountServiceImpl implements AccountService {
	
	@Autowired
	AccountDAO accountDao;
	
	@Override
	public AccountDTO getAccountById(int id) {
		AccountDTO account = new AccountDTO();
		BeanUtils.copyProperties(accountDao.find(id), account);
		return account;
	}
	
	@Override
	public AccountDTO getAccountByUsername(String username){
		AccountDTO account = new AccountDTO();
		BeanUtils.copyProperties(accountDao.findOne(namedQuery, parameters), account);
		return account;
	}

	@Override
	public List<AccountDTO> getAllAccount() {
		List<AccountDTO> listAccounts = null;
		BeanUtils.copyProperties(accountDao.findAll(), listAccounts);
		return listAccounts;
	}

	@Override
	public List<AccountDTO> getAllProfessional() {
		List<AccountDTO> listAccounts = null;
		BeanUtils.copyProperties(accountDao.findAllProfessional(), listAccounts);
		return listAccounts;
	}

	@Override
	public List<AccountDTO> getAllAdmin() {
		List<AccountDTO> listAccounts = null;
		BeanUtils.copyProperties(accountDao.findAllAdmin(), listAccounts);
		return listAccounts;
	}

	@Override
	public void addAccount(AccountDTO account) throws Exception {
		if(getAccountByUsername(account.getUsername()) != null){
			throw new IllegalArgumentException("Ce nom d'utilisateur existe déjà");
		}
		Account entity = new Account();
		BeanUtils.copyProperties(account, entity);
		accountDao.save(entity);
	}

	@Override
	public void deleteAccount(AccountDTO account) {
		Account entity = new Account();
		BeanUtils.copyProperties(account, entity);
		accountDao.delete(entity);
	}

	@Override
	public AccountDTO updateAccount(AccountDTO account) throws Exception {
		Account entity = new Account();
		BeanUtils.copyProperties(account, entity);
		entity = accountDao.update(entity);
		BeanUtils.copyProperties(entity, account);
		return account;
	}
}
